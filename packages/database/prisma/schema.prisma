// Golden Palace Database Schema
// Using Prisma 6 with PostgreSQL

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT
// ================================

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  passwordHash      String    @map("password_hash")
  phone             String?
  avatarUrl         String?   @map("avatar_url")
  bio               String?
  specialties       String[]  // Array of trading specialties
  tradingStyle      String?   @map("trading_style")
  experienceYears   Int?      @map("experience_years")
  favoriteMarkets   String[]  @map("favorite_markets")
  emailVerified     Boolean   @default(false) @map("email_verified")
  twoFactorEnabled  Boolean   @default(false) @map("two_factor_enabled")
  settings          Json?
  lastSeen          DateTime? @map("last_seen")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  ownedGroups       Group[]           @relation("GroupOwner")
  groupMemberships  GroupMembership[]
  messages          Message[]
  tradeIdeas        TradeIdea[]
  paperPositions    PaperPosition[]
  readReceipts      ReadReceipt[]
  messageReactions  MessageReaction[]
  competitionEntries CompetitionEntry[]
  userStats         UserStats?
  alerts            Alert[]
  createdCompetitions Competition[]   @relation("CompetitionCreator")
  createdTABoards   TABoard[]         @relation("TABoardCreator")
  taAnnotations     TAAnnotation[]    @relation("TAAnnotationUser")

  @@map("users")
}

model UserStats {
  userId         String  @id @map("user_id")
  totalTrades    Int     @default(0) @map("total_trades")
  winningTrades  Int     @default(0) @map("winning_trades")
  losingTrades   Int     @default(0) @map("losing_trades")
  winRate        Decimal @default(0) @map("win_rate") @db.Decimal(5, 2)
  totalPnl       Decimal @default(0) @map("total_pnl") @db.Decimal(12, 2)
  bestTrade      Decimal @default(0) @map("best_trade") @db.Decimal(12, 2)
  worstTrade     Decimal @default(0) @map("worst_trade") @db.Decimal(12, 2)
  avgWin         Decimal @default(0) @map("avg_win") @db.Decimal(12, 2)
  avgLoss        Decimal @default(0) @map("avg_loss") @db.Decimal(12, 2)
  profitFactor   Decimal @default(0) @map("profit_factor") @db.Decimal(5, 2)
  sharpeRatio    Decimal @default(0) @map("sharpe_ratio") @db.Decimal(5, 2)
  bestStreak     Int     @default(0) @map("best_streak")
  currentStreak  Int     @default(0) @map("current_streak")
  averageHoldTime Decimal @default(0) @map("average_hold_time") @db.Decimal(8, 2)
  maxDrawdown    Decimal @default(0) @map("max_drawdown") @db.Decimal(5, 2)
  updatedAt      DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

// ================================
// GROUP CHAT SYSTEM
// ================================

model Group {
  id          String      @id @default(cuid())
  name        String      @db.VarChar(100)
  description String?
  avatarUrl   String?     @map("avatar_url")
  ownerId     String      @map("owner_id")
  groupType   GroupType   @default(PRIVATE) @map("group_type")
  inviteCode  String?     @unique @map("invite_code")
  maxMembers  Int         @default(100) @map("max_members")
  settings    Json?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  owner       User              @relation("GroupOwner", fields: [ownerId], references: [id])
  members     GroupMembership[]
  messages    Message[]
  tradeIdeas  TradeIdea[]
  competitions Competition[]
  taBoards    TABoard[]
  paperPositions PaperPosition[]

  @@map("groups")
}

model GroupMembership {
  id        String           @id @default(cuid())
  groupId   String           @map("group_id")
  userId    String           @map("user_id")
  role      GroupRole        @default(MEMBER)
  status    MembershipStatus @default(ACTIVE)
  joinedAt  DateTime         @default(now()) @map("joined_at")
  leftAt    DateTime?        @map("left_at")

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_memberships")
}

model Message {
  id           String            @id @default(cuid())
  groupId      String            @map("group_id")
  userId       String            @map("user_id")
  content      String?
  messageType  MessageType       @default(TEXT) @map("message_type")
  attachments  Json?
  replyToId    String?           @map("reply_to_id")
  editedAt     DateTime?         @map("edited_at")
  deletedAt    DateTime?         @map("deleted_at")
  createdAt    DateTime          @default(now()) @map("created_at")

  // Relations
  group        Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo      Message?          @relation("MessageReply", fields: [replyToId], references: [id])
  replies      Message[]         @relation("MessageReply")
  readReceipts ReadReceipt[]
  reactions    MessageReaction[]

  @@map("messages")
}

model ReadReceipt {
  userId    String   @map("user_id")
  messageId String   @map("message_id")
  readAt    DateTime @default(now()) @map("read_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([userId, messageId])
  @@map("read_receipts")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  emoji     String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

// ================================
// TRADING FEATURES
// ================================

model TradeIdea {
  id           String        @id @default(cuid())
  groupId      String        @map("group_id")
  userId       String        @map("user_id")
  symbol       String        @db.VarChar(20)
  assetType    AssetType?    @map("asset_type")
  direction    TradeDirection
  entryPrice   Decimal       @map("entry_price") @db.Decimal(12, 4)
  stopLoss     Decimal?      @map("stop_loss") @db.Decimal(12, 4)
  takeProfit1  Decimal?      @map("take_profit_1") @db.Decimal(12, 4)
  takeProfit2  Decimal?      @map("take_profit_2") @db.Decimal(12, 4)
  takeProfit3  Decimal?      @map("take_profit_3") @db.Decimal(12, 4)
  timeframe    String?       @db.VarChar(20)
  confidence   Int?          @db.SmallInt // 1-5 rating
  rationale    String?
  chartUrl     String?       @map("chart_url")
  tags         String[]
  status       TradeStatus   @default(ACTIVE)
  closedPrice  Decimal?      @map("closed_price") @db.Decimal(12, 4)
  closedAt     DateTime?     @map("closed_at")
  pnl          Decimal?      @db.Decimal(12, 2)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Relations
  group          Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  paperPositions PaperPosition[]

  @@map("trade_ideas")
}

model PaperPosition {
  id           String       @id @default(cuid())
  userId       String       @map("user_id")
  groupId      String       @map("group_id")
  tradeIdeaId  String?      @map("trade_idea_id")
  symbol       String       @db.VarChar(20)
  assetType    AssetType    @default(STOCK) @map("asset_type")
  quantity     Decimal      @db.Decimal(12, 4)
  entryPrice   Decimal      @map("entry_price") @db.Decimal(12, 4)
  currentPrice Decimal?     @map("current_price") @db.Decimal(12, 4)
  stopLoss     Decimal?     @map("stop_loss") @db.Decimal(12, 4)
  takeProfit   Decimal?     @map("take_profit") @db.Decimal(12, 4)
  pnl          Decimal?     @db.Decimal(12, 2)
  pnlPercent   Decimal?     @map("pnl_percent") @db.Decimal(5, 2)
  status       PositionStatus @default(OPEN)
  openedAt     DateTime     @default(now()) @map("opened_at")
  closedAt     DateTime?    @map("closed_at")
  closedPrice  Decimal?     @map("closed_price") @db.Decimal(12, 4)
  closeReason  String?      @map("close_reason") @db.VarChar(50)

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tradeIdea TradeIdea? @relation(fields: [tradeIdeaId], references: [id])

  @@map("paper_positions")
}

// ================================
// COMPETITIONS & GAMIFICATION
// ================================

model Competition {
  id                 String             @id @default(cuid())
  groupId            String             @map("group_id")
  name               String             @db.VarChar(100)
  description        String?
  type               CompetitionType    @map("competition_type")
  startDate          DateTime           @map("start_date")
  endDate            DateTime           @map("end_date")
  entryFee           Decimal?           @map("entry_fee") @db.Decimal(10, 2)
  prizePool          Decimal?           @map("prize_pool") @db.Decimal(10, 2)
  prizeDistribution  Json?              @map("prize_distribution")
  rules              Json?
  minTrades          Int                @default(5) @map("min_trades")
  status             CompetitionStatus  @default(PENDING)
  createdBy          String             @map("created_by")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")

  // Relations
  group   Group              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator User               @relation("CompetitionCreator", fields: [createdBy], references: [id])
  entries CompetitionEntry[]

  @@map("competitions")
}

model CompetitionEntry {
  id               String    @id @default(cuid())
  competitionId    String    @map("competition_id")
  userId           String    @map("user_id")
  startingBalance  Decimal   @default(10000) @map("starting_balance") @db.Decimal(12, 2)
  currentBalance   Decimal?  @map("current_balance") @db.Decimal(12, 2)
  totalTrades      Int       @default(0) @map("total_trades")
  winningTrades    Int       @default(0) @map("winning_trades")
  roi              Decimal?  @db.Decimal(8, 2)
  rank             Int?
  prizeAmount      Decimal?  @map("prize_amount") @db.Decimal(10, 2)
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([competitionId, userId])
  @@map("competition_entries")
}

// ================================
// COLLABORATIVE TECHNICAL ANALYSIS
// ================================

model TABoard {
  id           String        @id @default(cuid())
  groupId      String        @map("group_id")
  createdBy    String        @map("created_by")
  symbol       String        @db.VarChar(20)
  timeframe    String        @db.VarChar(10)
  title        String        @db.VarChar(200)
  description  String?
  chartConfig  Json?         @map("chart_config")
  isPublic     Boolean       @default(false) @map("is_public")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Relations
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator     User          @relation("TABoardCreator", fields: [createdBy], references: [id])
  annotations TAAnnotation[]

  @@map("ta_boards")
}

model TAAnnotation {
  id         String          @id @default(cuid())
  boardId    String          @map("board_id")
  userId     String          @map("user_id")
  type       AnnotationType
  data       Json
  xPosition  Decimal         @map("x_position") @db.Decimal(5, 2)
  yPosition  Decimal         @map("y_position") @db.Decimal(5, 2)
  color      String?         @db.VarChar(7)
  createdAt  DateTime        @default(now()) @map("created_at")

  // Relations
  board TABoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User    @relation("TAAnnotationUser", fields: [userId], references: [id])

  @@map("ta_annotations")
}

// ================================
// ALERTS & NOTIFICATIONS
// ================================

model Alert {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  symbol      String      @db.VarChar(20)
  condition   AlertCondition
  targetPrice Decimal     @map("target_price") @db.Decimal(12, 4)
  message     String?
  status      AlertStatus @default(ACTIVE)
  triggeredAt DateTime?   @map("triggered_at")
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

// ================================
// ENUMS
// ================================

enum GroupType {
  PUBLIC
  PRIVATE
  INVITE_ONLY

  @@map("group_type")
}

enum GroupRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER

  @@map("group_role")
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  BANNED

  @@map("membership_status")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  TRADE_IDEA
  CHART
  SYSTEM

  @@map("message_type")
}

enum AssetType {
  STOCK
  FOREX
  CRYPTO
  OPTION
  FUTURE
  INDEX

  @@map("asset_type")
}

enum TradeDirection {
  LONG
  SHORT

  @@map("trade_direction")
}

enum TradeStatus {
  ACTIVE
  CLOSED
  CANCELLED

  @@map("trade_status")
}

enum PositionStatus {
  OPEN
  CLOSED
  STOPPED

  @@map("position_status")
}

enum CompetitionType {
  WEEKLY_PNL
  MONTHLY_ROI
  BEST_TRADE
  CONSISTENCY
  CUSTOM

  @@map("competition_type")
}

enum CompetitionStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED

  @@map("competition_status")
}

enum AnnotationType {
  DRAWING
  NOTE
  LEVEL
  PATTERN
  FIBONACCI

  @@map("annotation_type")
}

enum AlertCondition {
  ABOVE
  BELOW
  CROSSES_ABOVE
  CROSSES_BELOW

  @@map("alert_condition")
}

enum AlertStatus {
  ACTIVE
  TRIGGERED
  CANCELLED

  @@map("alert_status")
}

// ================================
// INDEXES FOR PERFORMANCE
// ================================

// Add indexes for frequently queried fields
// These will be created as separate migration files